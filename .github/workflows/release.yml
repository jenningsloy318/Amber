name: Amber Release

on:
  release:
    types: [published]

env:
  BIN_NAME: amber

jobs:
  linux:
    name: Linux (${{ matrix.libc }}, ${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
        libc: [gnu, musl]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.5

      - name: Compute target triple
        id: triple
        run: |
          arch="${{ matrix.arch }}"
          libc="${{ matrix.libc }}"
          case "$arch:$libc" in
            x86_64:gnu)   echo "triple=x86_64-unknown-linux-gnu"  >> $GITHUB_OUTPUT ;;
            aarch64:gnu)  echo "triple=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT ;;
            x86_64:musl)  echo "triple=x86_64-unknown-linux-musl" >> $GITHUB_OUTPUT ;;
            aarch64:musl) echo "triple=aarch64-unknown-linux-musl" >> $GITHUB_OUTPUT ;;
          esac

      - name: Add Rust target
        run: rustup target add ${{ steps.triple.outputs.triple }}

      - name: Build (cross)
        run: cross build --release --target ${{ steps.triple.outputs.triple }}

      - name: Package tar.xz
        run: |
          mkdir -p dist
          OUT="amber-linux-${{ matrix.libc }}-${{ matrix.arch }}.tar.xz"
          tar -C target/${{ steps.triple.outputs.triple }}/release -cJf "dist/$OUT" ${BIN_NAME}

      - name: Upload artifacts (Linux ${{ matrix.libc }} ${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.libc }}-${{ matrix.arch }}
          path: dist/*

  macos:
    name: macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Compute target triple
        id: triple
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo "triple=x86_64-apple-darwin" >> $GITHUB_OUTPUT
          else
            echo "triple=aarch64-apple-darwin" >> $GITHUB_OUTPUT
          fi

      - name: Add Rust target
        run: rustup target add ${{ steps.triple.outputs.triple }}

      - name: Build
        run: cargo build --release --target ${{ steps.triple.outputs.triple }}

      - name: Package tar.xz
        run: |
          mkdir -p dist
          OUT="amber-macos-${{ matrix.arch }}.tar.xz"
          tar -C target/${{ steps.triple.outputs.triple }}/release -cJf "dist/$OUT" ${BIN_NAME}

      - name: Upload artifacts (macOS ${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: dist/*

  windows:
    name: Windows (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        shell: bash
        run: cargo build --release

      - name: Package tar.xz
        shell: bash
        run: |
          mkdir -p dist
          tar -C target/release -cJf dist/amber-windows-x86_64.tar.xz ${BIN_NAME}.exe

      - name: Upload artifacts (Windows x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: dist/*

  installers:
    name: Prepare installers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Build native (host)
        run: cargo build --release

      - name: Generate installer scripts
        run: |
          mkdir -p dist
          cargo run --release -- build ./setup/install.ab   ./dist/install.sh
          cargo run --release -- build ./setup/uninstall.ab ./dist/uninstall.sh

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Create Debian package (x86_64)
        run: cargo deb --no-build --output="./dist/amber-linux-debian-x86_64.deb"

      - name: Upload artifacts (scripts & deb)
        uses: actions/upload-artifact@v4
        with:
          name: scripts-deb
          path: dist/*

  publish:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: [linux, macos, windows, installers]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: dist

      - name: Show collected files
        run: ls -al dist

      - name: Upload to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ github.event.release.tag_name }}
          overwrite: true
